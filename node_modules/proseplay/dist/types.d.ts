export class ProsePlay {
    constructor(el: HTMLElement);
    /**
     * Load a sample.
     * @param name The name of the sample to load.
     * @returns The ProsePlay instance with the parsed text.
     */
    load(name: "homophones" | "hypothetically" | "dickinson"): ProsePlay;
    /**
     * Create a ProsePlay instance and load a sample.
     * @param name The name of the sample to load.
     * @returns A ProsePlay instance with the parsed text.
     */
    static load(name: "homophones" | "hypothetically" | "dickinson"): ProsePlay;
    /**
     * Parse the given string.
     * @param str The formatted string to parse.
     * @returns The ProsePlay instance with the parsed text.
     */
    parse(str: string): ProsePlay;
    /**
     * Create a new ProsePlay instance and parse the given string.
     * @param str The formatted string to parse.
     * @returns A ProsePlay instance with the parsed text.
     */
    static parse(str: string): ProsePlay;
    /**
     * Slide each window to a random choice. If windows are linked, they will move to the same choice index together.
     */
    generate(): void;
    /**
     * Expand all windows to show all choices at once. When this is enabled, all other interactions are disabled until `collapse()` is called.
     */
    expand(): void;
    /**
     * Collapse all windows.
     */
    collapse(): void;
    /**
     * Check if windows are expanded or collapsed.
     * @returns A boolean representing whether windows are expanded (true) or collapsed (false).
     */
    isExpanded(): boolean;
    /**
     * Return the current text.
     * @returns A string of the current text.
     */
    snapshot(): string;
    /**
     * Set function to be called when certain choices are selected.
     * @param name Name of function.
     * @param fnc Function to be called.
     */
    setFunction(name: string, fnc: Function): void;
    /**
     * Return a nested list of choices in each window.
     */
    get choices(): string[][];
    /**
     * Return a list of indexes to which each window is currently set.
     */
    get currentIndexes(): number[];
    /**
     * Slide a specified window to a specified choice.
     * @param windowIndex The index of the window to slide.
     * @param choiceIndex The index of the choice to slide to.
     */
    slideWindow(windowIndex: number, choiceIndex: number): void;
}

//# sourceMappingURL=types.d.ts.map
