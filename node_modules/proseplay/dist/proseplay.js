import "./proseplay.css";


const $97aedba7ab332eed$var$windowTemplate = document.createElement("div");
$97aedba7ab332eed$var$windowTemplate.classList.add("proseplay-window");
const $97aedba7ab332eed$var$listTemplate = document.createElement("div");
$97aedba7ab332eed$var$listTemplate.classList.add("proseplay-list");
$97aedba7ab332eed$var$windowTemplate.append($97aedba7ab332eed$var$listTemplate);
const $97aedba7ab332eed$var$linkRefTemplate = document.createElement("sup");
$97aedba7ab332eed$var$linkRefTemplate.classList.add("proseplay-link-ref");
const $97aedba7ab332eed$var$BUFFER_TIME = 500;
let $97aedba7ab332eed$var$PADDING;
const $97aedba7ab332eed$var$mouse = {
    x: 0,
    y: 0
};
class $97aedba7ab332eed$export$cec157cbbbaf65c9 {
    links = [];
    horizontal = false;
    constructor(parent){
        this.el = $97aedba7ab332eed$var$windowTemplate.cloneNode(true);
        parent.appendChild(this.el);
        this.el.addEventListener("pointerover", this.handlePointerOver);
        this.el.addEventListener("pointerdown", this.handlePointerDown);
        this.el.addEventListener("pointermove", this.handlePointerMove);
        this.el.addEventListener("pointerup", this.handlePointerUp);
        this.el.addEventListener("pointerout", this.handlePointerOut);
        this.listEl = this.el.querySelector(".proseplay-list");
        this.choices = [];
        this.currentIndex = 0;
        this.isHoverable = true;
        this.isDragged = false;
        this.linkIndex = null;
        this.functionNames = [];
        this.functions = {};
        $97aedba7ab332eed$var$PADDING = parseInt(getComputedStyle(parent).fontSize) * 0.3;
    }
    /**
   * Change the direction of the window to horizontal, i.e. east–west.
   */ setHorizontal() {
        this.horizontal = true;
        this.el.classList.add("proseplay-horizontal");
    }
    /**
   * Add a choice to the window.
   * @param choice The choice object to be added.
   */ addChoice(choice) {
        this.choices.push(choice);
        this.listEl.appendChild(choice.el);
    }
    /**
   * Activate the specified choice and adjusts position and sizing accordingly.
   * @param choice The choice to be activated. If none is given, it readjusts to the current choice — this can be useful for resizing.
   */ activateChoice(choice) {
        if (!choice) {
            choice = this.choices[this.currentIndex];
            if (!this.horizontal) this.listEl.style.top = `-${choice.offsetTop}px`;
            else this.listEl.style.left = `${-Math.abs(choice.offsetLeft) + $97aedba7ab332eed$var$PADDING}px`;
        }
        this.currentIndex = this.choices.indexOf(choice);
        this.choices.forEach((otherChoice)=>otherChoice.deactivate());
        choice.activate();
        this.el.style.width = `${choice.offsetWidth}px`;
    }
    /**
   * Slide to a random choice.
   * @param choiceIndex Optional parameter, if a specific choice index is needed.
   * @returns The chosen index of choices.
   */ random(choiceIndex) {
        if (choiceIndex === undefined) choiceIndex = Math.floor(Math.random() * this.choices.length);
        if (choiceIndex > this.choices.length - 1) choiceIndex = this.choices.length - 1;
        const choice = this.choices[choiceIndex];
        this.activateChoice(choice);
        this.pointerDown();
        this.listEl.classList.add("proseplay-has-transition");
        setTimeout(()=>this.listEl.classList.remove("proseplay-has-transition"), $97aedba7ab332eed$var$BUFFER_TIME);
        setTimeout(()=>{
            if (!this.horizontal) this.listEl.style.top = `-${choice.offsetTop}px`;
            else this.listEl.style.left = `${-Math.abs(choice.offsetLeft) + $97aedba7ab332eed$var$PADDING}px`;
        }, 15);
        this.pointerUp();
        return choiceIndex;
    }
    slideToPos(pos) {
        if (!this.horizontal) this.listEl.style.top = `${pos}px`;
        else this.listEl.style.left = `${pos}px`;
        const targetChoice = this.getNearestChoice(pos);
        if (!targetChoice) return;
        this.activateChoice(targetChoice);
    }
    /**
   * Slide to a specified index in the window's array of choices.
   * @param choiceIndex Index of choice to slide to.
   */ slideToChoice(choiceIndex) {
        if (choiceIndex > this.choices.length - 1) return;
        const choice = this.choices[choiceIndex];
        this.pointerOver();
        this.pointerDown();
        this.listEl.classList.add("proseplay-has-transition");
        setTimeout(()=>this.listEl.classList.remove("proseplay-has-transition"), $97aedba7ab332eed$var$BUFFER_TIME);
        setTimeout(()=>{
            if (!this.horizontal) this.listEl.style.top = `-${choice.offsetTop}px`;
            else this.listEl.style.left = `${-Math.abs(choice.offsetLeft) + $97aedba7ab332eed$var$PADDING}px`;
        }, 15);
        this.pointerUp();
        this.pointerOut();
        this.activateChoice(choice);
    }
    getNearestChoice(pos) {
        let minDist = Infinity;
        let targetChoice = null;
        this.choices.forEach((choice)=>{
            let dist = !this.horizontal ? Math.abs(pos + choice.offsetTop) : Math.abs(pos + choice.offsetLeft - $97aedba7ab332eed$var$PADDING);
            if (dist < minDist) {
                minDist = dist;
                targetChoice = choice;
            }
        });
        return targetChoice;
    }
    snapToNearestChoice() {
        const choice = this.getNearestChoice(this.pos);
        if (!choice) return;
        if (!this.horizontal) this.listEl.style.top = `-${choice.offsetTop}px`;
        else this.listEl.style.left = `${-Math.abs(choice.offsetLeft) + $97aedba7ab332eed$var$PADDING}px`;
    }
    /**
   * Return either the `left` or `top` of the window's list element, depending on the direction of the window.
   */ get pos() {
        const property = this.horizontal ? "left" : "top";
        return parseInt(getComputedStyle(this.listEl).getPropertyValue(property).replace("px", ""));
    }
    handlePointerOver = (e)=>{
        e.preventDefault();
        if (!this.isHoverable) return;
        const target = e.target;
        if (!target.classList.contains("proseplay-current")) return;
        this.pointerOver();
        this.links.forEach((window)=>window.pointerOver());
    };
    pointerOver() {
        this.el.classList.add("proseplay-hover");
        this.el.parentElement.classList.add("proseplay-has-hover");
    }
    handlePointerDown = (e)=>{
        e.preventDefault();
        if (!this.isHoverable) return;
        const target = e.target;
        if (!target.classList.contains("proseplay-current")) return;
        this.el.setPointerCapture(e.pointerId);
        this.links.forEach((window)=>window.pointerDown());
        this.isDragged = true;
        $97aedba7ab332eed$var$mouse.x = e.clientX;
        $97aedba7ab332eed$var$mouse.y = e.clientY;
    };
    pointerDown() {
        this.el.classList.add("proseplay-hover");
    }
    handlePointerMove = (e)=>{
        e.preventDefault();
        if (!this.isDragged) return;
        const dist = !this.horizontal ? $97aedba7ab332eed$var$mouse.y - e.clientY : $97aedba7ab332eed$var$mouse.x - e.clientX;
        this.slideToPos(this.pos - dist);
        this.links.forEach((window)=>{
            window.slideToPos(this.pos - dist);
        });
        $97aedba7ab332eed$var$mouse.x = e.clientX;
        $97aedba7ab332eed$var$mouse.y = e.clientY;
    };
    handlePointerOut = ()=>{
        if (this.isDragged) return;
        this.pointerOut();
        this.links.forEach((window)=>window.pointerOut());
    };
    pointerOut() {
        this.isDragged = false;
        this.el.classList.remove("proseplay-hover");
        this.el.parentElement.classList.remove("proseplay-has-hover");
    }
    handlePointerUp = (e)=>{
        e.preventDefault();
        this.pointerUp();
        this.links.forEach((window)=>window.pointerUp());
    };
    pointerUp() {
        this.snapToNearestChoice();
        this.isDragged = false;
        this.el.classList.remove("proseplay-hover");
        let functionName = this.functionNames[this.currentIndex];
        if (functionName) {
            if (this.functions[functionName]) this.functions[functionName]();
        }
        this.el.parentElement.classList.remove("proseplay-has-hover");
    }
    /**
   * Set link between this window and other windows.
   * @param linkIndex Index number of link, as indicated in square brackets.
   * @param otherWindows Array of other windows in the same link.
   */ setLink(linkIndex, otherWindows) {
        this.linkIndex = linkIndex;
        if (linkIndex) {
            const sup = $97aedba7ab332eed$var$linkRefTemplate.cloneNode(true);
            this.el.insertAdjacentElement("afterend", sup);
            sup.innerText = `${linkIndex}`;
        }
        this.links = otherWindows;
    }
    /**
   * Set function names.
   * @param functionNames Array of function names.
   */ setFunctionNames(functionNames) {
        this.functionNames = functionNames;
    }
    /**
   * Assign functions to function names.
   * @param name Name of function.
   * @param fnc Function to be called.
   */ setFunction(name, fnc) {
        this.functions[name] = fnc;
    }
}


const $fb2114d596aef9c8$var$choiceTemplate = document.createElement("div");
$fb2114d596aef9c8$var$choiceTemplate.classList.add("proseplay-choice");
class $fb2114d596aef9c8$export$32a7462f6a06cbd5 {
    text = "";
    isCurrent = false;
    constructor(text){
        this.text = text;
        this.el = $fb2114d596aef9c8$var$choiceTemplate.cloneNode(true);
        if (text !== " ") this.el.innerText = text;
        else this.el.innerHTML = "&hairsp;";
    }
    /**
   * Activate this choice.
   */ activate() {
        this.isCurrent = true;
        this.el.classList.add("proseplay-current");
    }
    /**
   * Deactivate this choice.
   */ deactivate() {
        this.isCurrent = false;
        this.el.classList.remove("proseplay-current");
    }
    /**
   * Get the `offsetTop` of this element.
   */ get offsetTop() {
        return this.el.offsetTop;
    }
    /**
   * Get the `offsetLeft` of this element.
   */ get offsetLeft() {
        return this.el.offsetLeft;
    }
    /**
   * Get the `offsetWidth` of this element.
   */ get offsetWidth() {
        return this.el.offsetWidth;
    }
}


const $79098f0a1478fa01$var$lineTemplate = document.createElement("div");
$79098f0a1478fa01$var$lineTemplate.classList.add("proseplay-line");
const $79098f0a1478fa01$var$samples = {
    dickinson: `We talked with each other about each other
Though neither of us spoke —
We were (too engrossed with|listening to) the Second’s Races
And the Hoofs of the Clock —
Pausing in Front of our (Sentenced Faces|Foundering Faces)
(Time’s Decision shook —|Time compassion Took)
Arks of Reprieve he offered to us —
Ararats — we took —`,
    homophones: `in the (mist|missed) (see|sea)
(prey|pray) in the (morning|mourning)
for (words|worlds) that (exit|exist)
as (seep|sleep)`,
    hypothetically: `(hypothetically|hello)[1-]
(what if|i said)[1-]
(we fell|and held)[1-]
(in love|till death)[1-]`
};
let $79098f0a1478fa01$var$EM;
class $79098f0a1478fa01$export$bb601a587602e2b4 {
    lines = [];
    windows = [];
    links = [];
    _isExpanded = false;
    functions = {};
    constructor(el){
        this.el = el;
        this.el.classList.add("proseplay");
        window.addEventListener("resize", this.handleResize);
        $79098f0a1478fa01$var$EM = parseInt(getComputedStyle(el).fontSize);
    }
    static createInstance() {
        const container = document.createElement("div");
        container.classList.add("proseplay");
        document.body.appendChild(container);
        const pp = new $79098f0a1478fa01$export$bb601a587602e2b4(container);
        return pp;
    }
    /**
   * Load a sample.
   * @param name The name of the sample to load.
   * @returns The ProsePlay instance with the parsed text.
   */ load(name) {
        this.lines = [];
        this.windows = [];
        this.links = [];
        return this.parse($79098f0a1478fa01$var$samples[name]);
    }
    /**
   * Create a ProsePlay instance and load a sample.
   * @param name The name of the sample to load.
   * @returns A ProsePlay instance with the parsed text.
   */ static load(name) {
        const pp = $79098f0a1478fa01$export$bb601a587602e2b4.createInstance();
        return pp.load(name);
    }
    /**
   * Parse the given string.
   * @param str The formatted string to parse.
   * @returns The ProsePlay instance with the parsed text.
   */ parse(str) {
        this.lines = [];
        this.windows = [];
        this.links = [];
        str = str.trim();
        let textTokens = [];
        let lines = str.split("\n");
        lines.forEach((line)=>{
            const lineTokens = [];
            let m = line.matchAll(new RegExp("\\(([^(|)]+\\|([^(|)]+\\|?)+)\\)(\\[(\\d)*(-)?\\])?" // link index
            , "g"));
            const stringsIndex = 1, linkIndex = 4, orientationIndex = 5;
            let currIndex = 0;
            for (const match of m){
                const index = match.index;
                let isEscaped = line[index - 2] === "\\";
                let prevToken = {
                    strings: []
                }, currentToken = {
                    strings: []
                };
                if (isEscaped) {
                    prevToken.strings = [
                        line.slice(currIndex, index - 1)
                    ];
                    currentToken.strings = [
                        line.slice(index, index + match[0].length)
                    ];
                } else {
                    prevToken.strings = [
                        line.slice(currIndex, index)
                    ];
                    currentToken.strings = match[stringsIndex].split("|");
                    currentToken.strings.forEach((str, i)=>{
                        let [s, fnc] = str.split("->");
                        if (fnc) {
                            if (!currentToken.functionNames) currentToken.functionNames = [];
                            currentToken.functionNames[i] = fnc;
                            currentToken.strings[i] = s;
                        }
                    });
                    if (match[linkIndex]) currentToken.linkIndex = parseInt(match[linkIndex]);
                    if (match[orientationIndex] && (match[orientationIndex] === "|" || match[orientationIndex] === "-")) currentToken.horizontal = match[orientationIndex] === "-";
                }
                lineTokens.push(prevToken);
                lineTokens.push(currentToken);
                currIndex = index + match[0].length;
            }
            if (currIndex < line.length) lineTokens.push({
                strings: [
                    line.slice(currIndex)
                ]
            });
            textTokens.push(lineTokens);
        });
        this.constructText(textTokens);
        return this;
    }
    /**
   * Create a new ProsePlay instance and parse the given string.
   * @param str The formatted string to parse.
   * @returns A ProsePlay instance with the parsed text.
   */ static parse(str) {
        const pp = $79098f0a1478fa01$export$bb601a587602e2b4.createInstance();
        pp.parse(str);
        return pp;
    }
    constructText(text) {
        this.el.innerHTML = "";
        text.forEach((line)=>{
            const lineEl = $79098f0a1478fa01$var$lineTemplate.cloneNode(true);
            this.el.appendChild(lineEl);
            this.lines.push({
                el: lineEl,
                tokens: [],
                windows: []
            });
            line.forEach((token)=>{
                if (token.strings.length === 1) {
                    const span = document.createElement("span");
                    span.classList.add("proseplay-plaintext");
                    span.innerText = token.strings[0];
                    lineEl.append(span);
                    this.lines[this.lines.length - 1].tokens.push(token.strings[0]);
                } else {
                    const window1 = new (0, $97aedba7ab332eed$export$cec157cbbbaf65c9)(lineEl);
                    if (token.linkIndex) {
                        if (!this.links[token.linkIndex]) this.links[token.linkIndex] = [];
                        this.links[token.linkIndex].push(window1);
                    }
                    if (token.functionNames) window1.setFunctionNames(token.functionNames);
                    for(const name in this.functions)window1.setFunction(name, this.functions[name]);
                    if (token.horizontal) window1.setHorizontal();
                    this.lines[this.lines.length - 1].tokens.push(window1);
                    this.lines[this.lines.length - 1].windows.push(window1);
                    this.windows.push(window1);
                    token.strings.forEach((str)=>window1.addChoice(new (0, $fb2114d596aef9c8$export$32a7462f6a06cbd5)(str)));
                    window1.activateChoice(window1.choices[0]);
                }
            });
            if (line.length === 0) lineEl.innerHTML = "&nbsp;";
        });
        this.links.forEach((windows, i)=>{
            windows.forEach((window1)=>{
                const otherWindows = windows.filter((otherWindow)=>otherWindow !== window1);
                window1.setLink(i, otherWindows);
            });
        });
    }
    /**
   * Slide each window to a random choice. If windows are linked, they will move to the same choice index together.
   */ generate() {
        if (this._isExpanded) return;
        let windowsDragged = [];
        this.windows.forEach((window1)=>{
            if (windowsDragged.includes(window1)) return;
            let choiceIndex = window1.random();
            windowsDragged.push(window1);
            if (window1.linkIndex) this.links[window1.linkIndex].forEach((otherWindow)=>{
                if (windowsDragged.includes(otherWindow)) return;
                otherWindow.random(choiceIndex);
                windowsDragged.push(otherWindow);
            });
        });
    }
    /**
   * Expand all windows to show all choices at once. When this is enabled, all other interactions are disabled until `collapse()` is called.
   */ expand() {
        this._isExpanded = true;
        this.el.classList.toggle("proseplay-is-expanded", this._isExpanded);
        const em = parseFloat(getComputedStyle(this.el).fontSize);
        this.lines.forEach((line)=>{
            let marginBottom = 0;
            line.windows.forEach((window1)=>{
                let height = window1.el.scrollHeight - window1.listEl.offsetTop;
                window1.el.style.height = `${height}px`;
                let y = window1.el.scrollHeight - (window1.currentIndex + 1) * 1.25 * em - 0.06 * em;
                window1.el.style.top = `${y}px`;
                window1.el.style.marginTop = `${-y}px`;
                marginBottom = Math.max(marginBottom, y);
                window1.listEl.style.top = "0px";
                let maxWidth = 0;
                window1.choices.forEach((choice, i)=>{
                    choice.el.style.opacity = "1";
                    if (!window1.horizontal) maxWidth = Math.max(maxWidth, choice.el.offsetWidth);
                    else {
                        if (i > 0) maxWidth += $79098f0a1478fa01$var$EM;
                        maxWidth += choice.el.offsetWidth;
                    }
                });
                window1.el.style.width = `${maxWidth}px`;
                window1.isHoverable = false;
            });
            line.el.style.marginBottom = `${marginBottom}px`;
        });
    }
    /**
   * Collapse all windows.
   */ collapse() {
        this._isExpanded = false;
        this.el.classList.toggle("proseplay-is-expanded", this._isExpanded);
        this.lines.forEach((line)=>{
            line.el.style.removeProperty("margin-bottom");
            line.windows.forEach((window1)=>{
                window1.el.style.removeProperty("height");
                window1.el.style.removeProperty("top");
                window1.el.style.removeProperty("margin-top");
                window1.listEl.style.removeProperty("top");
                window1.choices.forEach((choice)=>{
                    choice.el.style.removeProperty("opacity");
                });
                window1.listEl.style.removeProperty("width");
                window1.isHoverable = true;
                window1.activateChoice();
            });
        });
    }
    /**
   * Check if windows are expanded or collapsed.
   * @returns A boolean representing whether windows are expanded (true) or collapsed (false).
   */ isExpanded() {
        return this._isExpanded;
    }
    /**
   * Return the current text.
   * @returns A string of the current text.
   */ snapshot() {
        let text = "";
        this.lines.forEach((line)=>{
            line.tokens.forEach((token)=>{
                if (token instanceof (0, $97aedba7ab332eed$export$cec157cbbbaf65c9)) text += token.choices[token.currentIndex].text;
                else text += token;
            });
            text += "\n";
        });
        return text;
    }
    /**
   * Set function to be called when certain choices are selected.
   * @param name Name of function.
   * @param fnc Function to be called.
   */ setFunction(name, fnc) {
        this.functions[name] = fnc;
        this.windows.forEach((window1)=>window1.setFunction(name, fnc));
    }
    handleResize = ()=>{
        this.windows.forEach((window1)=>window1.activateChoice());
    };
    /**
   * Return a nested list of choices in each window.
   */ get choices() {
        return this.windows.map((window1)=>{
            return window1.choices.map((choice)=>choice.text);
        });
    }
    /**
   * Return a list of indexes to which each window is currently set.
   */ get currentIndexes() {
        return this.windows.map((window1)=>window1.currentIndex);
    }
    /**
   * Slide a specified window to a specified choice.
   * @param windowIndex The index of the window to slide.
   * @param choiceIndex The index of the choice to slide to.
   */ slideWindow(windowIndex, choiceIndex) {
        if (windowIndex > this.windows.length - 1) return;
        const window1 = this.windows[windowIndex];
        if (choiceIndex > window1.choices.length - 1) return;
        window1.slideToChoice(choiceIndex);
    }
}


export {$79098f0a1478fa01$export$bb601a587602e2b4 as ProsePlay};
//# sourceMappingURL=proseplay.js.map
